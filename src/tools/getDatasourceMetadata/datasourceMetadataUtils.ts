import { z } from 'zod';

import { GraphQLResponse } from '../../sdks/tableau/apis/metadataApi.js';
import {
  FieldMetadata,
  Function,
  MetadataResponse,
} from '../../sdks/tableau/apis/vizqlDataServiceApi.js';

type Field = Partial<{
  name: string;
  dataType: FieldMetadata['dataType'];
  defaultAggregation: z.infer<typeof Function>;
  description: string;
  descriptionInherited: Array<{
    attribute: string;
    value: string | null;
  } | null>;
  dataCategory: string;
  role: string;
  defaultFormat: string;
  formula: string;
  isAutoGenerated: boolean;
  hasUserReference: boolean;
  binSize: number;
}>;

type DataDictionary = {
  fields: Array<Field>;
};

export function buildDataDictionary(
  readMetadataResult: MetadataResponse,
  listFieldsResult: GraphQLResponse,
): DataDictionary {
  // create a dataDictionary that combines field data from
  // readMetadata (VizQL Data Service API) and listFields (GraphQL Metadata API) results
  // to optimize for LLM accuracy and reduce tokens in response.
  const dataDictionary: DataDictionary = {
    fields: [],
  };

  if (!readMetadataResult.data) {
    // TODO: what should we do here?
    return dataDictionary;
  }

  // Only include fields from readMetadata results in our dataDictionary since only those can be used in queries.
  for (const field of readMetadataResult.data) {
    // only keeping essential field properties.
    const toPush: Field = {
      name: field.fieldCaption,
      dataType: field.dataType,
    };

    if (field.defaultAggregation) {
      toPush.defaultAggregation = field.defaultAggregation;
    }

    dataDictionary.fields.push(toPush);
  }

  if (
    !listFieldsResult.data.publishedDatasources ||
    listFieldsResult.data.publishedDatasources.length === 0 ||
    !listFieldsResult.data.publishedDatasources[0].fields
  ) {
    return dataDictionary;
  }

  // Of the fields in our dataDictionary, populate them with additional properties we get from listFields results.
  for (const field of dataDictionary.fields) {
    const matchingField = listFieldsResult.data.publishedDatasources[0].fields.find(
      (f) => f.name === field.name,
    );
    if (!matchingField) {
      continue;
    }
    if (matchingField.description) {
      field.description = matchingField.description;
    }
    if (matchingField.descriptionInherited && matchingField.descriptionInherited.length > 0) {
      field.descriptionInherited = matchingField.descriptionInherited;
    }
    if (matchingField.dataCategory) {
      field.dataCategory = matchingField.dataCategory;
    }
    if (matchingField.role) {
      field.role = matchingField.role;
    }
    if (matchingField.defaultFormat) {
      field.defaultFormat = matchingField.defaultFormat;
    }
    if (matchingField.formula && matchingField.formula.length > 0) {
      field.formula = matchingField.formula;
      if (matchingField.isAutoGenerated != undefined) {
        field.isAutoGenerated = matchingField.isAutoGenerated;
      }
      if (matchingField.hasUserReference != undefined) {
        field.hasUserReference = matchingField.hasUserReference;
      }
    }
    if (matchingField.binSize != undefined) {
      field.binSize = matchingField.binSize;
    }
  }

  return dataDictionary;
}
