import { GraphQLResponse } from '../../sdks/tableau/apis/metadataApi.js';
import { MetadataResponse } from '../../sdks/tableau/apis/vizqlDataServiceApi.js';

export function buildDataDictionary(
  readMetadataResult: MetadataResponse,
  listFieldsResult: GraphQLResponse,
): any {
  // create a dataDictionary to combine field data from
  // readMetadata (VizQL Data Service API) and listFields (GraphQL Metadata API) results.
  const dataDictionary = {
    fields: Array<any>(),
  };

  if (!readMetadataResult.data) {
    return dataDictionary;
  }

  // Only include fields from readMetadata results in our dataDictionary since only those can be used in queries.
  for (const field of readMetadataResult.data) {
    dataDictionary.fields.push(field);
  }

  if (!listFieldsResult.data.publishedDatasources[0].fields) {
    return dataDictionary;
  }

  // Of the fields in our dataDictionary, populate them with additional properties fromlistFields results.
  for (const field of dataDictionary.fields) {
    const matchingField = listFieldsResult.data.publishedDatasources[0].fields.find(
      (f: any) => f.name === field.fieldCaption,
    );
    if (!matchingField) {
      continue;
    }
    if (matchingField.description) {
      field.description = matchingField.description;
    }
    if (matchingField.descriptionInherited && matchingField.descriptionInherited.length > 0) {
      field.descriptionInherited = matchingField.descriptionInherited;
    }
    if (matchingField.dataType) {
      field.dataType = matchingField.dataType;
    }
    if (matchingField.dataCategory) {
      field.dataCategory = matchingField.dataCategory;
    }
    if (matchingField.role) {
      field.role = matchingField.role;
    }
    if (matchingField.defaultFormat) {
      field.defaultFormat = matchingField.defaultFormat;
    }
    if (matchingField.formula && matchingField.formula.length > 0) {
      field.formula = matchingField.formula;
      if (matchingField.isAutoGenerated != undefined) {
        field.isAutoGenerated = matchingField.isAutoGenerated;
      }
      if (matchingField.hasUserReference != undefined) {
        field.hasUserReference = matchingField.hasUserReference;
      }
    }
    if (matchingField.binSize != undefined) {
      field.binSize = matchingField.binSize;
    }
  }

  return dataDictionary;
}
