import { CallToolResult } from '@modelcontextprotocol/sdk/types.js';

import { Server } from '../../server.js';
import { getGetDatasourceMetadataTool } from './getDatasourceMetadata.js';

const mockReadMetadataResponses = vi.hoisted(() => ({
  success: {
    data: [
      {
        fieldName: 'Calculation_123456789',
        fieldCaption: 'Profit Ratio',
        dataType: 'REAL',
        defaultAggregation: 'SUM',
        logicalTableId: '',
      },
      {
        fieldName: 'Product Name',
        fieldCaption: 'Product Name',
        dataType: 'STRING',
        logicalTableId: 'Orders_123456789',
      },
      {
        fieldName: 'Quantity',
        fieldCaption: 'Quantity',
        dataType: 'INTEGER',
        defaultAggregation: 'SUM',
        logicalTableId: 'Orders_123456789',
      },
    ],
  },
  empty: {
    data: [],
  },
  nullData: {
    data: null,
  },
}));

const mockListFieldsResponses = vi.hoisted(() => ({
  success: {
    data: {
      publishedDatasources: [
        {
          name: 'Test Datasource',
          description: 'Test Description',
          owner: {
            name: 'Test Owner',
          },
          fields: [
            {
              name: 'Profit Ratio',
              isHidden: false,
              description: 'Calculated profit ratio field',
              descriptionInherited: [
                {
                  attribute: 'description',
                  value: 'Inherited profit description',
                },
              ],
              fullyQualifiedName: '[Profit Ratio]',
              __typename: 'CalculatedField',
              dataCategory: 'QUANTITATIVE',
              role: 'MEASURE',
              dataType: 'REAL',
              defaultFormat: 'p2',
              semanticRole: null,
              aggregation: 'Sum',
              aggregationParam: null,
              formula: 'SUM([Sales] - [Cost])',
              isAutoGenerated: false,
              hasUserReference: true,
            },
            {
              name: 'Product Name',
              isHidden: false,
              description: 'Name of the product',
              descriptionInherited: [],
              fullyQualifiedName: '[Product Name]',
              __typename: 'ColumnField',
              dataCategory: 'NOMINAL',
              role: 'DIMENSION',
              dataType: 'STRING',
              defaultFormat: null,
              semanticRole: null,
              aggregation: null,
              aggregationParam: null,
            },
            {
              name: 'Quantity',
              isHidden: false,
              description: 'Quantity ordered',
              descriptionInherited: [],
              fullyQualifiedName: '[Quantity]',
              __typename: 'ColumnField',
              dataCategory: 'QUANTITATIVE',
              role: 'MEASURE',
              dataType: 'INTEGER',
              defaultFormat: '#,##0',
              semanticRole: null,
              aggregation: 'Sum',
              aggregationParam: null,
            },
            {
              name: 'Binned Field',
              isHidden: false,
              description: 'A binned field',
              descriptionInherited: [],
              fullyQualifiedName: '[Binned Field]',
              __typename: 'BinField',
              dataCategory: 'ORDINAL',
              role: 'DIMENSION',
              dataType: 'INTEGER',
              formula: 'BIN([Some Field])',
              binSize: 10,
            },
          ],
        },
      ],
    },
  },
  empty: {
    data: {
      publishedDatasources: [],
    },
  },
  emptyFields: {
    data: {
      publishedDatasources: [
        {
          name: 'Test Datasource',
          fields: [],
        },
      ],
    },
  },
}));

const mocks = vi.hoisted(() => ({
  mockReadMetadata: vi.fn(),
  mockGraphql: vi.fn(),
  mockGetConfig: vi.fn(),
}));

vi.mock('../../restApiInstance.js', () => ({
  useRestApi: vi.fn().mockImplementation(async ({ callback }) =>
    callback({
      vizqlDataServiceMethods: {
        readMetadata: mocks.mockReadMetadata,
      },
      metadataMethods: {
        graphql: mocks.mockGraphql,
      },
    }),
  ),
}));

vi.mock('../../config.js', () => ({
  getConfig: mocks.mockGetConfig,
}));

describe('getDatasourceMetadataTool', () => {
  beforeEach(() => {
    vi.clearAllMocks();
    // Set default config for existing tests
    mocks.mockGetConfig.mockReturnValue({
      disableMetadataApiRequests: false,
    });
  });

  it('should create a tool instance with correct properties', () => {
    const getDatasourceMetadataTool = getGetDatasourceMetadataTool(new Server());
    expect(getDatasourceMetadataTool.name).toBe('get-datasource-metadata');
    expect(getDatasourceMetadataTool.description).toEqual(expect.any(String));
    expect(getDatasourceMetadataTool.paramsSchema).toMatchObject({
      datasourceLuid: expect.any(Object),
    });
    expect(getDatasourceMetadataTool.annotations).toMatchObject({
      title: 'Get Datasource Metadata',
      readOnlyHint: true,
      openWorldHint: false,
    });
  });

  it('should successfully merge data from both APIs and return enriched metadata', async () => {
    mocks.mockReadMetadata.mockResolvedValue(mockReadMetadataResponses.success);
    mocks.mockGraphql.mockResolvedValue(mockListFieldsResponses.success);

    const result = await getToolResult();

    expect(result.isError).toBe(false);
    const responseData = JSON.parse(result.content[0].text as string);

    expect(responseData).toMatchObject({
      fields: [
        {
          name: 'Profit Ratio',
          dataType: 'REAL',
          defaultAggregation: 'SUM',
          description: 'Calculated profit ratio field',
          descriptionInherited: [
            {
              attribute: 'description',
              value: 'Inherited profit description',
            },
          ],
          dataCategory: 'QUANTITATIVE',
          role: 'MEASURE',
          defaultFormat: 'p2',
          formula: 'SUM([Sales] - [Cost])',
          isAutoGenerated: false,
          hasUserReference: true,
        },
        {
          name: 'Product Name',
          dataType: 'STRING',
          description: 'Name of the product',
          dataCategory: 'NOMINAL',
          role: 'DIMENSION',
        },
        {
          name: 'Quantity',
          dataType: 'INTEGER',
          defaultAggregation: 'SUM',
          description: 'Quantity ordered',
          dataCategory: 'QUANTITATIVE',
          role: 'MEASURE',
          defaultFormat: '#,##0',
        },
      ],
    });

    expect(mocks.mockReadMetadata).toHaveBeenCalledWith({
      datasource: {
        datasourceLuid: 'test-luid',
      },
    });
    expect(mocks.mockGraphql).toHaveBeenCalledWith(expect.stringContaining('datasourceFieldInfo'));
  });

  it('should handle empty readMetadata response gracefully', async () => {
    mocks.mockReadMetadata.mockResolvedValue(mockReadMetadataResponses.empty);
    mocks.mockGraphql.mockResolvedValue(mockListFieldsResponses.success);

    const result = await getToolResult();

    expect(result.isError).toBe(false);
    const responseData = JSON.parse(result.content[0].text as string);
    expect(responseData).toEqual({
      fields: [],
    });
  });

  it('should handle null readMetadata data gracefully', async () => {
    mocks.mockReadMetadata.mockResolvedValue(mockReadMetadataResponses.nullData);
    mocks.mockGraphql.mockResolvedValue(mockListFieldsResponses.success);

    const result = await getToolResult();

    expect(result.isError).toBe(false);
    const responseData = JSON.parse(result.content[0].text as string);
    expect(responseData).toEqual({
      fields: [
        {
          dataCategory: 'QUANTITATIVE',
          dataType: 'REAL',
          defaultAggregation: 'Sum',
          defaultFormat: 'p2',
          description: 'Calculated profit ratio field',
          descriptionInherited: [
            {
              attribute: 'description',
              value: 'Inherited profit description',
            },
          ],
          formula: 'SUM([Sales] - [Cost])',
          hasUserReference: true,
          isAutoGenerated: false,
          name: 'Profit Ratio',
          role: 'MEASURE',
        },
        {
          dataCategory: 'NOMINAL',
          dataType: 'STRING',
          description: 'Name of the product',
          name: 'Product Name',
          role: 'DIMENSION',
        },
        {
          dataCategory: 'QUANTITATIVE',
          dataType: 'INTEGER',
          defaultAggregation: 'Sum',
          defaultFormat: '#,##0',
          description: 'Quantity ordered',
          name: 'Quantity',
          role: 'MEASURE',
        },
        {
          binSize: 10,
          dataCategory: 'ORDINAL',
          dataType: 'INTEGER',
          description: 'A binned field',
          formula: 'BIN([Some Field])',
          name: 'Binned Field',
          role: 'DIMENSION',
        },
      ],
    });
  });

  it('should handle empty listFields response and return basic metadata only', async () => {
    mocks.mockReadMetadata.mockResolvedValue(mockReadMetadataResponses.success);
    mocks.mockGraphql.mockResolvedValue(mockListFieldsResponses.empty);

    const result = await getToolResult();

    expect(result.isError).toBe(false);
    const responseData = JSON.parse(result.content[0].text as string);

    // Should have basic fields from readMetadata without enrichment
    expect(responseData).toMatchObject({
      fields: [
        {
          name: 'Profit Ratio',
          dataType: 'REAL',
          defaultAggregation: 'SUM',
        },
        {
          name: 'Product Name',
          dataType: 'STRING',
        },
        {
          name: 'Quantity',
          dataType: 'INTEGER',
          defaultAggregation: 'SUM',
        },
      ],
    });

    // Ensure no enriched fields are present
    expect(responseData.fields[0]).not.toHaveProperty('description');
    expect(responseData.fields[0]).not.toHaveProperty('dataCategory');
  });

  it('should handle empty fields in listFields response', async () => {
    mocks.mockReadMetadata.mockResolvedValue(mockReadMetadataResponses.success);
    mocks.mockGraphql.mockResolvedValue(mockListFieldsResponses.emptyFields);

    const result = await getToolResult();

    expect(result.isError).toBe(false);
    const responseData = JSON.parse(result.content[0].text as string);

    // Should have basic fields from readMetadata without enrichment
    expect(responseData.fields).toHaveLength(3);
    expect(responseData.fields[0]).not.toHaveProperty('description');
  });

  it('should handle partial field matching between APIs', async () => {
    // readMetadata has fields that aren't in listFields
    const partialReadMetadata = {
      data: [
        {
          fieldName: 'Existing Field',
          fieldCaption: 'Existing Field',
          dataType: 'STRING',
          logicalTableId: '',
        },
        {
          fieldName: 'Missing Field',
          fieldCaption: 'Missing Field',
          dataType: 'INTEGER',
          logicalTableId: '',
        },
      ],
    };

    const partialListFields = {
      data: {
        publishedDatasources: [
          {
            fields: [
              {
                name: 'Existing Field',
                description: 'This field exists in both',
                dataCategory: 'NOMINAL',
                role: 'DIMENSION',
              },
            ],
          },
        ],
      },
    };

    mocks.mockReadMetadata.mockResolvedValue(partialReadMetadata);
    mocks.mockGraphql.mockResolvedValue(partialListFields);

    const result = await getToolResult();

    expect(result.isError).toBe(false);
    const responseData = JSON.parse(result.content[0].text as string);

    expect(responseData.fields).toHaveLength(2);

    // First field should be enriched
    expect(responseData.fields[0]).toMatchObject({
      name: 'Existing Field',
      dataType: 'STRING',
      description: 'This field exists in both',
      dataCategory: 'NOMINAL',
      role: 'DIMENSION',
    });

    // Second field should only have basic data
    expect(responseData.fields[1]).toMatchObject({
      name: 'Missing Field',
      dataType: 'INTEGER',
    });
    expect(responseData.fields[1]).not.toHaveProperty('description');
  });

  it('should handle binSize property for BinField types', async () => {
    const readMetadataWithBin = {
      data: [
        {
          fieldName: 'Binned Field',
          fieldCaption: 'Binned Field',
          dataType: 'INTEGER',
          logicalTableId: '',
        },
      ],
    };

    mocks.mockReadMetadata.mockResolvedValue(readMetadataWithBin);
    mocks.mockGraphql.mockResolvedValue(mockListFieldsResponses.success);

    const result = await getToolResult();

    expect(result.isError).toBe(false);
    const responseData = JSON.parse(result.content[0].text as string);

    expect(responseData.fields[0]).toMatchObject({
      name: 'Binned Field',
      dataType: 'INTEGER',
      binSize: 10,
    });
  });

  it('should handle readMetadata API errors gracefully', async () => {
    const errorMessage = 'ReadMetadata API Error';
    mocks.mockReadMetadata.mockRejectedValue(new Error(errorMessage));
    mocks.mockGraphql.mockResolvedValue(mockListFieldsResponses.success);

    const result = await getToolResult();
    expect(result.isError).toBe(true);
    expect(result.content[0].text).toBe(
      'requestId: test-request-id, error: ReadMetadata API Error',
    );
  });

  it('should handle listFields API errors gracefully', async () => {
    const errorMessage = 'GraphQL API Error';
    mocks.mockReadMetadata.mockResolvedValue(mockReadMetadataResponses.success);
    mocks.mockGraphql.mockRejectedValue(new Error(errorMessage));

    const result = await getToolResult();
    expect(result.isError).toBe(false);
    const responseData = JSON.parse(result.content[0].text as string);
    expect(responseData).toMatchObject({
      fields: [
        {
          name: 'Profit Ratio',
          dataType: 'REAL',
          defaultAggregation: 'SUM',
        },
        {
          name: 'Product Name',
          dataType: 'STRING',
        },
        {
          name: 'Quantity',
          dataType: 'INTEGER',
          defaultAggregation: 'SUM',
        },
      ],
    });
  });

  it('should handle when both APIs fail', async () => {
    const readMetadataError = 'ReadMetadata API Error';
    const graphqlError = 'GraphQL API Error';

    mocks.mockReadMetadata.mockRejectedValue(new Error(readMetadataError));
    mocks.mockGraphql.mockRejectedValue(new Error(graphqlError));

    const result = await getToolResult();
    expect(result.isError).toBe(true);
    // Should fail with the first error (readMetadata is called first)
    expect(result.content[0].text).toBe(
      'requestId: test-request-id, error: ReadMetadata API Error',
    );
  });

  it('should return only readMetadata result when disableMetadataApiRequests is true and readMetadata succeeds', async () => {
    // Configure to disable metadata API requests
    mocks.mockGetConfig.mockReturnValue({
      disableMetadataApiRequests: true,
    });

    mocks.mockReadMetadata.mockResolvedValue(mockReadMetadataResponses.success);
    mocks.mockGraphql.mockResolvedValue(mockListFieldsResponses.success);

    const result = await getToolResult();

    expect(result.isError).toBe(false);
    const responseData = JSON.parse(result.content[0].text as string);

    // Should only have basic fields from readMetadata without enrichment
    expect(responseData).toMatchObject({
      fields: [
        {
          name: 'Profit Ratio',
          dataType: 'REAL',
          defaultAggregation: 'SUM',
        },
        {
          name: 'Product Name',
          dataType: 'STRING',
        },
        {
          name: 'Quantity',
          dataType: 'INTEGER',
          defaultAggregation: 'SUM',
        },
      ],
    });

    // Ensure no enriched fields are present
    expect(responseData.fields[0]).not.toHaveProperty('description');
    expect(responseData.fields[0]).not.toHaveProperty('dataCategory');
    expect(responseData.fields[0]).not.toHaveProperty('role');

    // Verify readMetadata was called but graphql was not
    expect(mocks.mockReadMetadata).toHaveBeenCalledWith({
      datasource: {
        datasourceLuid: 'test-luid',
      },
    });
    expect(mocks.mockGraphql).not.toHaveBeenCalled();
  });

  it('should return error when disableMetadataApiRequests is true and readMetadata fails', async () => {
    // Configure to disable metadata API requests
    mocks.mockGetConfig.mockReturnValue({
      disableMetadataApiRequests: true,
    });

    const errorMessage = 'ReadMetadata API Error';
    mocks.mockReadMetadata.mockRejectedValue(new Error(errorMessage));
    mocks.mockGraphql.mockResolvedValue(mockListFieldsResponses.success);

    const result = await getToolResult();

    expect(result.isError).toBe(true);
    expect(result.content[0].text).toBe(
      'requestId: test-request-id, error: ReadMetadata API Error',
    );

    // Verify readMetadata was called but graphql was not
    expect(mocks.mockReadMetadata).toHaveBeenCalledWith({
      datasource: {
        datasourceLuid: 'test-luid',
      },
    });
    expect(mocks.mockGraphql).not.toHaveBeenCalled();
  });
});

async function getToolResult(): Promise<CallToolResult> {
  const getDatasourceMetadataTool = getGetDatasourceMetadataTool(new Server());
  return await getDatasourceMetadataTool.callback(
    { datasourceLuid: 'test-luid' },
    {
      signal: new AbortController().signal,
      requestId: 'test-request-id',
      sendNotification: vi.fn(),
      sendRequest: vi.fn(),
    },
  );
}
