import { CallToolResult } from '@modelcontextprotocol/sdk/types.js';

import { Server } from '../server.js';
import { getGraphqlQuery, getListFieldsTool } from './listFields.js';

const mockMetadataResponses = vi.hoisted(() => ({
  success: {
    data: {
      publishedDatasources: [
        {
          name: 'Test Datasource',
          description: 'Test Description',
          owner: {
            name: 'Test Owner',
          },
          fields: [
            {
              name: 'Field1',
              isHidden: false,
              description: 'Field 1 Desc',
              descriptionInherited: [],
              fullyQualifiedName: '[field1]',
              __typename: 'ColumnField',
              dataCategory: 'NOMINAL',
              role: 'DIMENSION',
              dataType: 'STRING',
              defaultFormat: null,
              semanticRole: null,
              aggregation: null,
              aggregationParam: null,
            },
            {
              name: 'Field2',
              isHidden: false,
              description: 'Field 2 Desc',
              descriptionInherited: [
                {
                  attribute: 'description',
                  value: 'Inherited description',
                },
              ],
              fullyQualifiedName: '[field2]',
              __typename: 'CalculatedField',
              dataCategory: 'QUANTITATIVE',
              role: 'MEASURE',
              dataType: 'INTEGER',
              defaultFormat: null,
              semanticRole: null,
              aggregation: 'Sum',
              aggregationParam: null,
              formula: 'SUM([field1])',
              isAutoGenerated: false,
              hasUserReference: true,
            },
          ],
        },
      ],
    },
  },
  empty: {
    data: {
      publishedDatasources: [],
    },
  },
}));

const mocks = vi.hoisted(() => ({
  mockGraphql: vi.fn(),
}));

vi.mock('../restApiInstance.js', () => ({
  useRestApi: vi
    .fn()
    .mockImplementation(async (_host, _authConfig, _requestId, _server, callback) =>
      callback({
        metadataMethods: {
          graphql: mocks.mockGraphql,
        },
      }),
    ),
}));

describe('listFieldsTool', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('should create a tool instance with correct properties', () => {
    const listFieldsTool = getListFieldsTool(new Server());
    expect(listFieldsTool.name).toBe('list-fields');
    expect(listFieldsTool.paramsSchema).toMatchObject({ datasourceLuid: expect.any(Object) });
  });

  it('should successfully fetch and return field metadata', async () => {
    mocks.mockGraphql.mockResolvedValue(mockMetadataResponses.success);

    const result = await getToolResult();

    expect(result.isError).toBe(false);
    expect(JSON.parse(result.content[0].text as string)).toEqual(mockMetadataResponses.success);
    expect(mocks.mockGraphql).toHaveBeenCalledWith(getGraphqlQuery('test-luid'));
  });

  it('should successfully fetch and return empty list when no published datasources are found', async () => {
    mocks.mockGraphql.mockResolvedValue(mockMetadataResponses.empty);

    const result = await getToolResult();

    expect(result.isError).toBe(false);
    expect(JSON.parse(result.content[0].text as string)).toEqual(mockMetadataResponses.empty);
    expect(mocks.mockGraphql).toHaveBeenCalledWith(getGraphqlQuery('test-luid'));
  });

  it('should handle API errors gracefully', async () => {
    const errorMessage = 'API Error';
    mocks.mockGraphql.mockRejectedValue(new Error(errorMessage));

    const result = await getToolResult();
    expect(result.isError).toBe(true);
    expect(result.content[0].text).toBe('requestId: test-request-id, error: API Error');
  });
});

async function getToolResult(): Promise<CallToolResult> {
  const listFieldsTool = getListFieldsTool(new Server());
  return await listFieldsTool.callback(
    { datasourceLuid: 'test-luid' },
    {
      signal: new AbortController().signal,
      requestId: 'test-request-id',
      sendNotification: vi.fn(),
      sendRequest: vi.fn(),
    },
  );
}
