import { CallToolResult } from '@modelcontextprotocol/sdk/types.js';
import { Ok } from 'ts-results-es';
import { z } from 'zod';

import { getConfig } from '../config.js';
import { useRestApi } from '../restApiInstance.js';
import { Server } from '../server.js';
import { Tool } from './tool.js';
import { validateDatasourceLuid } from './validateDatasourceLuid.js';

export const getGraphqlQuery = (datasourceLuid: string): string => `
  query datasourceFieldInfo {
    publishedDatasources(filter: { luid: "${datasourceLuid}" }) {
      name
      description
      owner {
        name
      }
      fields {
        name
        isHidden
        description
        descriptionInherited {
          attribute
          value
        }
        fullyQualifiedName
        __typename
        ... on AnalyticsField {
          __typename
        }
        ... on ColumnField {
          dataCategory
          role
          dataType
          defaultFormat
          semanticRole
          aggregation
          aggregationParam
        }
        ... on CalculatedField {
          dataCategory
          role
          dataType
          defaultFormat
          semanticRole
          aggregation
          aggregationParam
          formula
          isAutoGenerated
          hasUserReference
        }
        ... on BinField {
          dataCategory
          role
          dataType
          formula
          binSize
        }
        ... on GroupField {
          dataCategory
          role
          dataType
          hasOther
        }
        ... on CombinedSetField {
          delimiter
          combinationType
        }
      }
    }
  }`;

const paramsSchema = {
  datasourceLuid: z.string().nonempty(),
};

export const getListFieldsTool = (server: Server): Tool<typeof paramsSchema> => {
  const listFieldsTool = new Tool({
    server,
    name: 'list-fields',
    description: `
    Fetches rich field metadata (name, description, inherited description, dataType, dataCategory, role, etc.) for the specified datasource via Tableau's Metadata API.
    This Returns a list of field dicts or an error message. In general this tool should be used for getting the metadata to ground the use of the query_datasource tool.
    Note that not all fields, such as Hierarchy fields, can be used with the queryDatasource tool.
    `,
    paramsSchema,
    annotations: {
      title: 'List Fields',
      readOnlyHint: true,
      openWorldHint: false,
    },
    argsValidator: validateDatasourceLuid,
    callback: async ({ datasourceLuid }, { requestId }): Promise<CallToolResult> => {
      const config = getConfig();
      const query = getGraphqlQuery(datasourceLuid);

      return await listFieldsTool.logAndExecute({
        requestId,
        args: { datasourceLuid },
        callback: async () => {
          return new Ok(
            await useRestApi(
              config.server,
              config.authConfig,
              requestId,
              server,
              async (restApi) => {
                return await restApi.metadataMethods.graphql(query);
              },
            ),
          );
        },
      });
    },
  });

  return listFieldsTool;
};
